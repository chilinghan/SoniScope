import Foundation
import PDFKit
import HealthKit
import UIKit
import SwiftUI

struct PDFReportGenerator {
    static func generate(from allSessions: [SessionEntity], healthManager: HealthDataManager) -> URL? {
        let pdfMetaData = [
            kCGPDFContextCreator: "SoniScope",
            kCGPDFContextAuthor: "SoniScope User",
            kCGPDFContextTitle: "SoniScope Medical Report"
        ]

        let format = UIGraphicsPDFRendererFormat()
        format.documentInfo = pdfMetaData as [String: Any]

        let pageWidth = 612.0
        let pageHeight = 792.0
        let pageRect = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)

        let fileName = "SoniScope_MedicalReport_\(Date().timeIntervalSince1970).pdf"
        let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)

        // Sort and take the most recent 5 (excluding the current session)
        let sortedSessions = allSessions.sorted {
            ($0.timestamp ?? .distantPast) > ($1.timestamp ?? .distantPast)
        }

        guard let currentSession = sortedSessions.first else { return nil }
        let previousSessions = Array(sortedSessions.dropFirst().prefix(5))

        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)

        do {
            try renderer.writePDF(to: fileURL) { context in
                context.beginPage()

                let titleFont = UIFont.boldSystemFont(ofSize: 20)
                let labelFont = UIFont.systemFont(ofSize: 14)
                let smallFont = UIFont.italicSystemFont(ofSize: 12)

                var yOffset: CGFloat = 40
                let leftMargin: CGFloat = 40

                func drawText(_ text: String, font: UIFont, y: CGFloat, x: CGFloat = 40) {
                    let attributes: [NSAttributedString.Key: Any] = [.font: font]
                    let textRect = CGRect(x: x, y: y, width: pageWidth - 2 * x, height: 20)
                    text.draw(in: textRect, withAttributes: attributes)
                }

                // Header
                drawText("🩺 SoniScope Medical Report", font: titleFont, y: yOffset)
                yOffset += 40

                // Patient Info
                drawText("👤 Patient Info", font: titleFont, y: yOffset)
                yOffset += 25
                drawText("Date of Birth: \(healthManager.dateOfBirth)", font: labelFont, y: yOffset)
                yOffset += 20
                drawText("Sex: \(healthManager.biologicalSex)", font: labelFont, y: yOffset)
                yOffset += 20
                drawText("Blood Type: \(healthManager.bloodType)", font: labelFont, y: yOffset)
                yOffset += 30

                // Current Session Section
                drawText("📌 Current Session", font: titleFont, y: yOffset)
                yOffset += 25
                drawText("Date: \(formattedDate(currentSession.timestamp))", font: labelFont, y: yOffset)
                yOffset += 20
                drawText("Diagnosis: \(currentSession.diagnosis ?? "Unknown")", font: labelFont, y: yOffset)
                yOffset += 30

                // Previous Sessions Table
                drawText("📝 Previous 5 Sessions", font: titleFont, y: yOffset)
                yOffset += 30

                let columnWidths: [CGFloat] = [80, 160, 260]
                let headers = ["Session #", "Date", "Diagnosis"]
                var xOffset = leftMargin

                for (i, header) in headers.enumerated() {
                    let rect = CGRect(x: xOffset, y: yOffset, width: columnWidths[i], height: 20)
                    header.draw(in: rect, withAttributes: [.font: UIFont.boldSystemFont(ofSize: 14)])
                    xOffset += columnWidths[i]
                }

                yOffset += 24

                for (index, session) in previousSessions.enumerated() {
                    xOffset = leftMargin
                    let values = [
                        "\(index + 1)",
                        formattedDate(session.timestamp),
                        session.diagnosis ?? "Unknown"
                    ]

                    for (i, value) in values.enumerated() {
                        let rect = CGRect(x: xOffset, y: yOffset, width: columnWidths[i], height: 20)
                        value.draw(in: rect, withAttributes: [.font: labelFont])
                        xOffset += columnWidths[i]
                    }
                    yOffset += 24
                }

                yOffset += 30

                // Footer
                drawText("📍 Generated by SoniScope", font: smallFont, y: yOffset)
            }

            return fileURL
        } catch {
            print("❌ Failed to generate PDF: \(error)")
            return nil
        }
    }

    private static func formattedDate(_ date: Date?) -> String {
        guard let date = date else { return "Unknown" }
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .none
        return formatter.string(from: date)
    }
}
