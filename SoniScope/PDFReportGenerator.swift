//
//  PDFReportGenerator.swift
//  SoniScope
//
//  Created by Venkata Siva Ramisetty on 7/24/25.
//


import Foundation
import PDFKit
import HealthKit
import UIKit

struct PDFReportGenerator {
    static func generate(from session: SessionEntity, healthManager: HealthDataManager) -> URL? {
        let pdfMetaData = [
            kCGPDFContextCreator: "SoniScope",
            kCGPDFContextAuthor: "SoniScope User",
            kCGPDFContextTitle: "SoniScope Session Report"
        ]

        let format = UIGraphicsPDFRendererFormat()
        format.documentInfo = pdfMetaData as [String: Any]

        let pageWidth = 612.0
        let pageHeight = 792.0
        let pageRect = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)

        let fileName = "SoniScope_Session_\(Date().timeIntervalSince1970).pdf"
        let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)

        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)

        do {
            try renderer.writePDF(to: fileURL) { context in
                context.beginPage()
                let titleAttributes = [NSAttributedString.Key.font: UIFont.boldSystemFont(ofSize: 24)]
                let labelAttributes = [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16)]
                
                var yOffset: CGFloat = 40

                func draw(text: String, attributes: [NSAttributedString.Key: Any]) {
                    let textRect = CGRect(x: 40, y: yOffset, width: pageWidth - 80, height: 30)
                    text.draw(in: textRect, withAttributes: attributes)
                    yOffset += 36
                }

                // Title
                draw(text: "🩺 SoniScope Session Report", attributes: titleAttributes)

                // Session Info
                draw(text: "Session Name: \(session.name ?? "Untitled")", attributes: labelAttributes)
                draw(text: "Date: \(formattedDate(session.timestamp))", attributes: labelAttributes)
                draw(text: "Diagnosis: \(session.diagnosis ?? "Unknown")", attributes: labelAttributes)
                draw(text: "Notes: \(session.notes ?? "None")", attributes: labelAttributes)

                yOffset += 20

                // Health Info
                draw(text: "👤 User Health Profile", attributes: titleAttributes)
                draw(text: "Date of Birth: \(healthManager.dateOfBirth)", attributes: labelAttributes)
                draw(text: "Sex: \(healthManager.biologicalSex)", attributes: labelAttributes)
                draw(text: "Blood Type: \(healthManager.bloodType)", attributes: labelAttributes)

                yOffset += 20

                // Optional Footer
                draw(text: "Generated by SoniScope", attributes: [.font: UIFont.italicSystemFont(ofSize: 14)])
            }

            return fileURL
        } catch {
            print("❌ Failed to generate PDF: \(error)")
            return nil
        }
    }

    private static func formattedDate(_ date: Date?) -> String {
        guard let date = date else { return "Unknown" }
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}
